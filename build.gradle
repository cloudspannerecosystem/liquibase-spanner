/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "java"
    id "groovy"
    id "com.google.cloud.tools.jib" version "3.4.4"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "com.github.harbby.gradle.serviceloader" version "1.1.9"
}


group = "com.google.cloudspannerecosystem"


if (project.hasProperty('tagVersion') && project.tagVersion.trim()) {
    project.version = project.tagVersion.trim()
} else {
   project.version = "SNAPSHOT"
}


repositories {
    mavenCentral()
    jcenter()
}


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// Liquibase <4 uses Liquibase-Package to determine what to scan
jar {
  manifest {
    attributes(
      "Liquibase-Package": "liquibase.ext.spanner"
    )
  }
}

// Liquibase 4 uses ServiceLoader
serviceLoader {
    serviceInterface 'liquibase.database.Database'
    serviceInterface 'liquibase.database.DatabaseConnection'
    serviceInterface 'liquibase.datatype.LiquibaseDataType'
    serviceInterface 'liquibase.sqlgenerator.SqlGenerator'
    serviceInterface 'liquibase.change.Change'
    serviceInterface 'liquibase.changelog.ChangeLogHistoryService'
    serviceInterface 'liquibase.snapshot.SnapshotGenerator'
}

dependencies {
    constraints {
        implementation("com.google.guava:guava") {
            attributes {
                attribute(Attribute.of("org.gradle.jvm.environment", String.class), "standard-jvm")
            }
        }
        testImplementation("com.google.guava:guava") {
            attributes {
                attribute(Attribute.of("org.gradle.jvm.environment", String.class), "standard-jvm")
            }
        }
    }
    // Cloud Spanner related
    implementation platform('com.google.cloud:libraries-bom:26.57.0')
    implementation("com.google.cloud:google-cloud-spanner-jdbc")

    // Liquibase Core - needed for testing and docker container
    implementation("org.liquibase:liquibase-core:4.31.1")
    implementation("org.yaml:snakeyaml:2.4")
    implementation("org.apache.commons:commons-lang3:3.17.0")

    // Testing
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.12.0")
    testImplementation("org.testcontainers:testcontainers:1.20.5")
    testImplementation("net.java.dev.jna:jna:5.16.0")
    testImplementation("com.google.truth:truth:1.4.4") {
        exclude group: 'com.google.guava', module: 'guava'
    }

    // For using the Liquibase test harness
    testImplementation 'junit:junit:4.13.2'
    testImplementation ('org.liquibase:liquibase-test-harness:1.0.10'){
        exclude group: 'org.firebirdsql.jdbc', module: 'jaybird'
    }
    testImplementation('org.apache.groovy:groovy-all:4.0.26') {
        exclude module: 'org.codehaus.groovy:groovy-testng'
        exclude module: 'org.codehaus.groovy:groovy-swing'
    }
    testImplementation 'org.spockframework:spock-core:2.3-groovy-4.0'

    // For testing runtime
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.12.0")
    
    // For Spanner mock server testing
    testImplementation(group: 'com.google.cloud', name: 'google-cloud-spanner', classifier: 'tests')
    testImplementation(group: 'com.google.api', name: 'gax-grpc', version: '2.62.0', classifier: 'testlib')

    // For Liquibase to work without throwing NoClassDefFound/NoSuchMethodError
    testRuntimeOnly("info.picocli:picocli:4.7.6")
}


// Run unit tests (Spanner emulator and mock tests)
test {

  // serviceLoaderBuild is necessary for Liquibase to find the extensions
  dependsOn "serviceLoaderBuild"

  useJUnitPlatform {
    excludeTags "integration"
    exclude '**/CloudSpannerBaseHarnessSuiteTest*'
    exclude '**/CloudSpannerAdvancedHarnessSuiteTest*'
  }
}

tasks.register('liquibaseHarnessTest', Test) {

    // serviceLoaderBuild is necessary for Liquibase to find the extensions
    dependsOn "serviceLoaderBuild"

    useJUnitPlatform {
        include '**/CloudSpannerBaseHarnessSuiteTest*'
        include '**/CloudSpannerAdvancedHarnessSuiteTest*'
        include '**/CloudSpannerFoundationalHarnessSuiteTest*'
    }
}

// Run integration tests (against live Spanner)
//
// Requires SPANNER_PROJECT and SPANNER_INSTANCE environment variables.
// Also requires GOOGLE_APPLICATION_CREDENTIALS environment variable
// if using a JSON key for authentication.
tasks.register('integrationTest', Test) {
  shouldRunAfter "test"

  // serviceLoaderBuild is necessary for Liquibase to find the extensions
  dependsOn "serviceLoaderBuild"

  useJUnitPlatform {
    includeTags "integration"
    exclude '**/CloudSpannerBaseHarnessSuiteTest*'
    exclude '**/CloudSpannerAdvancedHarnessSuiteTest*'
  }
}

tasks.withType(Test).configureEach {
  javaLauncher = javaToolchains.launcherFor {
      languageVersion = JavaLanguageVersion.of(8)
  }
  dependencies {
      testImplementation("org.mockito:mockito-core:3.12.4")
  }
}

tasks.named('liquibaseHarnessTest', Test).configure {
  javaLauncher = javaToolchains.launcherFor {
      languageVersion = JavaLanguageVersion.of(11)
  }
  dependencies {
      testImplementation("org.mockito:mockito-core:5.15.2")
  }
}

build {

    // Build shadowJar during normal build
    // This includes all the needed classes for an extension
    dependsOn "shadowJar"
}

// Output shadowJar that can be used directly by Liquibase
//
// This contains all Cloud Spanner dependencies.
shadowJar {
    dependsOn "test"
    archiveBaseName.set("liquibase-spanner")
    mergeServiceFiles()
    dependencies {
        exclude([
          dependency("org.liquibase:liquibase-core")
        ])
    }
}

// Output runnable docker container.
//
// The docker container has everything you need to run Liquibase with Spanner.
jib {
    from {
        image = "gcr.io/distroless/java:8"
    }
    to {
        image = "liquibase-spanner"
    }
    container {
        mainClass = 'liquibase.integration.commandline.Main'
    }
}

